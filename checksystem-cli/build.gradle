import java.nio.file.Paths

plugins {
    id 'application'
    id 'ru.clevertec.checksystem.plugin.pdfprint' version "1.1.7"
}

group = 'ru.clevertec.checksystem'
version = '1.0'
description = 'checksystem-cli'

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_14
}

application {
    mainClass = "ru.clevertec.checksystem.cli.Main"
}

repositories {
    mavenCentral()
}

def coreProject = project(":checksystem-core")

dependencies {
    implementation coreProject
    testImplementation "org.junit.jupiter:junit-jupiter:5.7.0"
}

sourceSets.main.resources.srcDirs += "${coreProject.projectDir}/src/main/resources"

def applyJvmArgs = { o ->
    o.jvmArgs += ["--add-opens", "java.base/java.lang=ALL-UNNAMED"]
    coreProject.configurations.runtimeAgent.each { o.jvmArgs "-javaagent:${it.absolutePath}" }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    doFirst { t -> applyJvmArgs(t) }
}

tasks.withType(JavaExec) {
    it.each { t -> doFirst { applyJvmArgs(t) } }
}

def printWithTemplate = true

pdfprint {
    runTaskName = "run"

    inputFilePath = Paths.get("$rootDir", "..", "examples", "checks_serialized.json")
    inputFileFormat = "json"
    outputPdfPath = Paths.get("$rootDir", "resources", "CHECKS_" + (printWithTemplate ? "WITH" : "WITHOUT") + "_TEMPLATE.pdf")

    withTemplate = printWithTemplate
    templateUrl = "https://github.com/stebadmitriy/files/raw/main/Clevertec_Template.pdf"
    topOffset = 94
    templateOutput = Paths.get("$rootDir", "resources", "templates", "Clevertec_Template.pdf")
}
